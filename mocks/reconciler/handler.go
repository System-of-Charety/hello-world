// Copyright 2020 Coinbase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v1.0.0. DO NOT EDIT.

package reconciler

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/coinbase/rosetta-sdk-go/types"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// ReconciliationFailed provides a mock function with given fields: ctx, reconciliationType, account, currency, computedBalance, liveBalance, block
func (_m *Handler) ReconciliationFailed(ctx context.Context, reconciliationType string, account *types.AccountIdentifier, currency *types.Currency, computedBalance string, liveBalance string, block *types.BlockIdentifier) error {
	ret := _m.Called(ctx, reconciliationType, account, currency, computedBalance, liveBalance, block)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.AccountIdentifier, *types.Currency, string, string, *types.BlockIdentifier) error); ok {
		r0 = rf(ctx, reconciliationType, account, currency, computedBalance, liveBalance, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReconciliationSucceeded provides a mock function with given fields: ctx, reconciliationType, account, currency, balance, block
func (_m *Handler) ReconciliationSucceeded(ctx context.Context, reconciliationType string, account *types.AccountIdentifier, currency *types.Currency, balance string, block *types.BlockIdentifier) error {
	ret := _m.Called(ctx, reconciliationType, account, currency, balance, block)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.AccountIdentifier, *types.Currency, string, *types.BlockIdentifier) error); ok {
		r0 = rf(ctx, reconciliationType, account, currency, balance, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
